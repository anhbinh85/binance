def estimate_price_movement(symbol, interval, order_book, limit):
    # Fetch historical price data
    historical_data = fetch_historical_data(symbol, interval, limit)

    if historical_data is None or len(historical_data) < 50:
        return 0

    # Convert historical data to a DataFrame
    df = pd.DataFrame(historical_data)

    # Calculate SMA, EMA, RSI, and MACD manually or using pandas_ta
    df['SMA_12'] = df['close'].rolling(window=12).mean()
    df['EMA_12'] = df['close'].ewm(span=12, adjust=False).mean()
    df['RSI_12'] = ta.momentum.rsi(df['close'], length=12)
    calculate_macd(df)

    df['Middle_Band'] = df['close'].rolling(window=20).mean()
    df['STD'] = df['close'].rolling(window=20).std()
    df['Upper_Band'] = df['Middle_Band'] + (df['STD'] * 2)
    df['Lower_Band'] = df['Middle_Band'] - (df['STD'] * 2)

    # Calculate Log Returns for Volatility
    df['Log_Return'] = np.log(df['close'] / df['close'].shift(1))
    df['Volatility'] = df['Log_Return'].rolling(window=20).std() * np.sqrt(20)  # Adjusted for 20 periods

    latest = df.iloc[-1]
    rsi = latest['RSI_12']
    macd_current = latest['MACD']
    macdsignal_current = latest['MACD_Signal']
    upper_band = latest['Upper_Band']
    lower_band = latest['Lower_Band']
    latest_close = latest['close']
    volatility = latest['Volatility']

    # Order book analysis for bid/ask ratio
    bid_volume = sum(float(bid[1]) for bid in order_book['bids'])
    ask_volume = sum(float(ask[1]) for ask in order_book['asks'])
    bid_ask_ratio = bid_volume / ask_volume

    # Bollinger Bands Signals
    bb_signal = 0
    if latest_close > upper_band:
        bb_signal = -1  # Price might be overbought
    elif latest_close < lower_band:
        bb_signal = 1  # Price might be oversold

    # Combine signals
    uptrend_signals = 0
    downtrend_signals = 0

    # Check RSI
    if rsi > 70:
        downtrend_signals += 1
    elif rsi < 30:
        uptrend_signals += 1

    # Check MACD
    if macd_current > macdsignal_current:
        uptrend_signals += 1
    elif macd_current < macdsignal_current:
        downtrend_signals += 1

    # Check Bid/Ask Ratio
    if bid_ask_ratio > 1:
        uptrend_signals += 1
    elif bid_ask_ratio < 1:
        downtrend_signals += 1

    # Incorporating Bollinger Band signals
    if bb_signal == 1:
        uptrend_signals += 1
    elif bb_signal == -1:
        downtrend_signals += 1

    # Incorporate volatility into the signals
    volatility_threshold = df['Volatility'].quantile(0.8)  # 80th percentile as a threshold
    if volatility > volatility_threshold:
        downtrend_signals += 1  # Higher volatility might indicate market fear
    else:
        uptrend_signals += 1  # Lower volatility might indicate stability

    # Final decision
    decision = 0
    if uptrend_signals > downtrend_signals:
        decision = 1  # More signals point towards an uptrend
    elif downtrend_signals > uptrend_signals:
        decision = -1  # More signals point towards a downtrend

    return {
        'Symbol': symbol,
        'RSI': rsi,
        'MACD_Current': macd_current,
        'MACDSignal_Current': macdsignal_current,
        'Bid_Ask_Ratio': bid_ask_ratio,
        'Uptrend_Signals': uptrend_signals,
        'Downtrend_Signals': downtrend_signals,
        'latest_close': latest_close,
        'Bollinger_Upper': upper_band,
        'Bollinger_Lower': lower_band,
        'Bollinger_Signal': bb_signal,
        'Volatility': volatility,
        'Volatility_Threshold': volatility_threshold,
        'Final_Decision': decision
    }

def analyze_order_book(order_book, spread_percentile=90):
    """
    Analyze the order book to estimate supply, demand, and potential price movement, including spread analysis and imbalance.
    """
    if not order_book:
        return "No data", {}

    bids = order_book['bids']  # List of [price, quantity]
    asks = order_book['asks']  # List of [price, quantity]

    # Convert bids and asks to DataFrame
    bids_df = pd.DataFrame(bids, columns=['price', 'quantity'], dtype=float)
    asks_df = pd.DataFrame(asks, columns=['price', 'quantity'], dtype=float)

    # Calculate total volumes and bid-ask spread
    total_bid_volume = bids_df['quantity'].sum()
    total_ask_volume = asks_df['quantity'].sum()
    bid_ask_spread = asks_df['price'].min() - bids_df['price'].max()

    # Imbalance calculation
    imbalance = (total_bid_volume - total_ask_volume) / (total_bid_volume + total_ask_volume)

    # Spread threshold calculation
    spread_threshold = np.percentile(asks_df['price'] - bids_df['price'], spread_percentile)

    # Trend prediction based on imbalance and spread threshold
    trend = "No clear trend"
    if imbalance > 0.1 and bid_ask_spread < spread_threshold:
        trend = "Uptrend Expected"
    elif imbalance < -0.1 and bid_ask_spread < spread_threshold:
        trend = "Downtrend Expected"
    elif bid_ask_spread >= spread_threshold:
        trend = "Uncertain Market"

    # Prepare the result dictionary
    ratio_dict = {
        'total_bid_volume': total_bid_volume,
        'total_ask_volume': total_ask_volume,
        'imbalance': imbalance,
        'bid_ask_spread': bid_ask_spread,
        'spread_threshold': spread_threshold,
        'trend': trend
    }

    return trend, ratio_dict

async def analyze_all_gainers_order_book(top_gainers):
    if not top_gainers:
        print("No top gainers to analyze.")
        return []

    results = []

    for gainer in top_gainers:

        symbol = gainer['symbol']

        interval = "15m"

        limit = 100 #100 candle stick 15m

        # Fetch order book data
        order_book = fetch_order_book(symbol)

        # Analyze the order book
        order_book_trend = analyze_order_book(order_book)

        # Fetch Historical data
        historical_data = fetch_historical_data(symbol, interval, limit)

        #Add OBV into historical_data:
        # historical_data_added_OBV = calculate_obv(historical_data)
        # obv_data = {symbol:historical_data_added_OBV["OBV"]}
        # print("**********OBV*****************")
        # print(obv_data)

        # Ta_lib:

        print(f"Pattern Recognition from TA-LIB....for {symbol}")
        candle_stick_recognition = TA_Candle_Stick_Recognition(historical_data[-5:])
        candle_stick_recognition.detect_patterns()

        # Technical Indicatiors Analysis
        print("Technical Indicatiors Analysis ...")
        ti = TechnicalIndicators(historical_data)
        technical_analysis = ti.execute()


        # Candle_stick_with_trend_line:
        print("Candle stick with trend line ... using TA-LIB")
        candle_with_trend = Candle_Stick_Combine_Trend_Line(historical_data)
        ta_lib_data = candle_with_trend.execute()


        # Fetch the latest candle stick 15m:
        # print("Pattern Recognition from manual analysis...")
        latest_candlestick = historical_data[-1]

        # context, average_close = determine_trend(symbol, interval, limit)

        # check_hammer_or_hangingman = is_hammer_or_hangingman(latest_candlestick, context)

        # engulfing_pattern = check_for_engulfing_pattern(historical_data)

        # check_dark_cloud = is_dark_cloud_cover(historical_data)

        # check_piercing_pattern = detect_candlestick_piercing_on_in_neck_thrusting_pattern(historical_data)

        # check_stars_pattern = detect_stars_patterns(historical_data)

        # check_harami = detect_harami_and_cross(historical_data)

        # tweezers_top = check_tweezers_top(historical_data)

        # tweezers_bottom = check_tweezers_bottom(historical_data)

        # belt_hold = check_belt_hold(historical_data)

        # upside_gap_two_crows = check_upside_gap_two_crows(historical_data)

        # three_black_crows = check_three_black_crows(historical_data)

        # three_advancing_white_soldiers = check_three_advancing_white_soldiers(historical_data)

        # buddha_top_bottom = check_buddha_top_bottom(historical_data, top=True)

        # counterattack_lines = check_counterattack_lines(historical_data)

        # dumpling_top = check_dumpling_top(historical_data)

        # frypan_bottom = check_frypan_bottom(historical_data)

        # tower_top = check_tower_top(historical_data)

        # tower_bottom = check_tower_bottom(historical_data)

        # window_gaps = detect_window_gaps(historical_data)

        # tasuki_patterns = detect_tasuki_patterns(historical_data)

        # gapping_plays = detect_gapping_plays(historical_data)

        # gapping_side_by_side_white_lines = detect_gapping_side_by_side_white_lines(historical_data)

        # rising_falling_three_methods = detect_rising_falling_three_methods(historical_data)

        # separating_lines = detect_separating_lines(historical_data)

        # doji_types = detect_doji_types(historical_data)

        # manual_analysis = {
        # "Symbol": symbol,
        # "Latest Candle": str(latest_candlestick),
        # "Trend": context,
        # "Average Close Price": average_close,
        # "Manual Patterns": {
        #     "Hammer or Hangingman": check_hammer_or_hangingman,
        #     "Engulfing Pattern": engulfing_pattern,
        #     "Dark Cloud Cover": check_dark_cloud,
        #     "Piercing, On-Neck, In-Neck, Thrusting": check_piercing_pattern,
        #     "Stars Pattern": check_stars_pattern,
        #     "Harami and Cross": check_harami,
        #     "Tweezers Top": tweezers_top,
        #     "Tweezers Bottom": tweezers_bottom,
        #     "Belt Hold": belt_hold,
        #     "Upside-Gap Two Crows": upside_gap_two_crows,
        #     "Three Black Crows": three_black_crows,
        #     "Three Advancing White Soldiers": three_advancing_white_soldiers,
        #     "Buddha Top/Bottom": buddha_top_bottom,
        #     "Counterattack Lines": counterattack_lines,
        #     "Dumpling Top": dumpling_top,
        #     "Frypan Bottom": frypan_bottom,
        #     "Tower Top": tower_top,
        #     "Tower Bottom": tower_bottom,
        #     "Window Gaps": window_gaps,
        #     "Tasuki Patterns": tasuki_patterns,
        #     "Gapping Plays": gapping_plays,
        #     "Gapping Side-by-Side White Lines": gapping_side_by_side_white_lines,
        #     "Rising and Falling Three Methods": rising_falling_three_methods,
        #     "Separating Lines": separating_lines,
        #     "Doji Types": doji_types
        #     } 
        # }

        master_data = {
            # "manual_analysis": manual_analysis,
            "ta_lib_data": ta_lib_data,
            "technical_analysis":technical_analysis
        }

        # print(master_results)

        # Estimate price movement

        price_movement = estimate_price_movement(symbol, interval, order_book, limit)

        trading_signal = trading_decision_based_on_conditions(price_movement, order_book_trend[0])

        # Generate the result dictionary for each symbol
        result = {
            "symbol": symbol,
            "price_increase_percentage": gainer['priceChangePercent'],
            "orderbook": order_book_trend,
            "price_movement": price_movement,
            "trading_signal": trading_signal,
            "ta_lib_data" : master_data["ta_lib_data"],
            "technical_analysis": master_data["technical_analysis"]
        }
        results.append(result)

    return results

price_movement = estimate_price_movement(symbol, interval, order_book, limit)

order_book_trend = analyze_order_book(order_book)

def trading_decision_based_on_conditions(price_movement, order_book_trend):
    '''
    Trading strategy prioritizing Uptrend and Downtrend Signals, with a secondary priority on Order Book Trend.
    Additional indicators: RSI, MACD, and Bollinger Bands are used for further refinement.
    1 indicates a buy or enter position (long).
    0 indicates a hold or no action.
    -1 indicates a sell or exit position (short).
    '''
    symbol = price_movement['Symbol']
    rsi = price_movement['RSI']
    macd = price_movement['MACD_Current']
    macd_signal = price_movement['MACDSignal_Current']
    bb_signal = price_movement['Bollinger_Signal']
    uptrend_signals = price_movement['Uptrend_Signals']
    downtrend_signals = price_movement['Downtrend_Signals']

    # Initial decision setup
    decision = {
        "Symbol": symbol,
        "Spot Trading": 0,
        "Long Position": 0,
        "Short Position": 0
    }

    # First priority: Uptrend vs Downtrend Signals
    if uptrend_signals > downtrend_signals:
        decision["Spot Trading"] = 1
        decision["Long Position"] = 1
    elif downtrend_signals > uptrend_signals:
        decision["Spot Trading"] = -1
        decision["Short Position"] = 1
    else:
        # Second priority: Order Book Trend
        if order_book_trend == "Uptrend Expected":
            decision["Spot Trading"] = 1
            decision["Long Position"] = 1
        elif order_book_trend == "Downtrend Expected":
            decision["Spot Trading"] = -1
            decision["Short Position"] = 1
        elif order_book_trend == "Uncertain Market" or order_book_trend == "No clear trend":
            # No action for uncertain market or no clear trend
            decision["Spot Trading"] = 0
        else:
            # If still undecided, use additional indicators as a fallback
            if rsi > 60 or bb_signal == -1:  # Overbought condition
                decision["Spot Trading"] = -1
                decision["Short Position"] = 1
            elif rsi < 40 or bb_signal == 1:  # Oversold condition
                decision["Spot Trading"] = 1
                decision["Long Position"] = 1

            # Tertiary priority: MACD-based refinement
            if macd < macd_signal and rsi > 50:  # Bearish MACD, not oversold
                decision["Short Position"] = 1
            elif macd > macd_signal and rsi < 50:  # Bullish MACD, not overbought
                decision["Long Position"] = 1

    return decision

results = [{
            "symbol": symbol,
            "price_increase_percentage": gainer['priceChangePercent'],
            "orderbook": order_book_trend,
            "price_movement": price_movement,
            "trading_signal": trading_signal,
            "ta_lib_data" : master_data["ta_lib_data"],
            "technical_analysis": master_data["technical_analysis"],
            "obv_values":obv_values,
            "trading_decision":A
        },
        {
            "symbol": symbol,
            "price_increase_percentage": gainer['priceChangePercent'],
            "orderbook": order_book_trend,
            "price_movement": price_movement,
            "trading_signal": trading_signal,
            "ta_lib_data" : master_data["ta_lib_data"],
            "technical_analysis": master_data["technical_analysis"],
            "obv_values":obv_values,
            "trading_decision":B
        },
        ]

